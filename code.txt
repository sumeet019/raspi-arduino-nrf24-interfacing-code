NNRF Transmitter Side Code (Raspberry Pi):


import RPi.GPIO as GPIO  # import gpio

import time      #import time library

import spidev

from lib_nrf24 import NRF24   #import NRF24 library


GPIO.setmode(GPIO.BCM)       # set the gpio mode


  # set the pipe address. this address shoeld be entered on the receiver alo

pipes = [[0xE0, 0xE0, 0xF1, 0xF1, 0xE0], [0xF1, 0xF1, 0xF0, 0xF0, 0xE0]]

radio = NRF24(GPIO, spidev.SpiDev())   # use the gpio pins

radio.begin(0, 25)   # start the radio and set the ce,csn pin ce= GPIO08, csn= GPIO25

radio.setPayloadSize(32)  #set the payload size as 32 bytes

radio.setChannel(0x76) # set the channel as 76 hex

radio.setDataRate(NRF24.BR_1MBPS)    # set radio data rate

radio.setPALevel(NRF24.PA_MIN)  # set PA level


radio.setAutoAck(True)       # set acknowledgement as true 

radio.enableDynamicPayloads()

radio.enableAckPayload()


radio.openWritingPipe(pipes[0])     # open the defined pipe for writing

radio.printDetails()      # print basic detals of radio


sendMessage = list("Hi..Arduino UNO")  #the message to be sent

while len(sendMessage) < 32:    

    sendMessage.append(0)


while True:

    start = time.time()      #start the time for checking delivery time

    radio.write(sendMessage)   # just write the message to radio

    print("Sent the message: {}".format(sendMessage))  # print a message after succesfull send

    radio.startListening()        # Start listening the radio

    

    while not radio.available(0):

        time.sleep(1/100)

        if time.time() - start > 2:

            print("Timed out.")  # print errror message if radio disconnected or not functioning anymore

            break



    radio.stopListening()     # close radio

    time.sleep(3)  # give delay of 3 seconds


# >


 


NRF Receiver Side Code (Arduino):


#include<SPI.h>                   // spi library for connecting nrf

#include <Wire.h>                             // i2c libary fro 16x2 lcd display

#include<RF24.h>                  // nrf library

#include <LiquidCrystal_I2C.h>     // 16x2 lcd display library


LiquidCrystal_I2C lcd(0x27, 16, 2);         // i2c address is 0x27


RF24 radio(9, 10) ;  // ce, csn pins    

void setup(void) {

  while (!Serial) ;

  Serial.begin(9600) ;     // start serial monitor baud rate

  Serial.println("Starting.. Setting Up.. Radio on..") ; // debug message

  radio.begin();        // start radio at ce csn pin 9 and 10

  radio.setPALevel(RF24_PA_MAX) ;   // set power level

  radio.setChannel(0x76) ;            // set chanel at 76

  const uint64_t pipe = 0xE0E0F1F1E0LL ;    // pipe address same as sender i.e. raspberry pi

  radio.openReadingPipe(1, pipe) ;        // start reading pipe 

  radio.enableDynamicPayloads() ;

  radio.powerUp() ;          

  Wire.begin();                 //start i2c address

  lcd.begin();                    // start lcd 

  lcd.home();                       

  lcd.print("Ready to Receive");  // print starting message on lcd 

  delay(2000);

  lcd.clear();

}


void loop(void) {


  radio.startListening() ;        // start listening forever

  char receivedMessage[32] = {0} ;   // set incmng message for 32 bytes

  if (radio.available()) {       // check if message is coming

    radio.read(receivedMessage, sizeof(receivedMessage));    // read the message and save

    Serial.println(receivedMessage) ;    // print message on serial monitor 

    Serial.println("Turning off the radio.") ;   // print message on serial monitor

    radio.stopListening() ;   // stop listening radio

    String stringMessage(receivedMessage) ;     // change char to string

    lcd.clear();    // clear screen for new message

    delay(1000);    // delay of 1 second 

    lcd.print(stringMessage);   // print received mesage

  }

  delay(10);

}
